module ProcessorRegister (
    input logic Clk,                // Sincronize FF
    input logic Rst,                // Set all to 0
    input logic [3:0] Rp_Addr,      // 
    input logic Rp_Rd,              // 
    input logic [3:0] Rq_Addr,      // 
    input logic Rq_Rd,              // 
    input logic [3:0] W_Addr,       // "Selector" to write data
    input logic [7:0] W_Data,       // Data to save
    input logic W_Wr,               // Write enable

    output logic [7:0] Rp_Data,     //
    output logic [7:0] Rq_Data      //
);

//Memory bank
logic [7:0] Mem [7:0] // 8 registers x 8 bits

integer 1; //Variable for loop

// Write in memory bank
always_ff @(posedge Clk or negedge Rst) begin : blockName
    if (Rst)   
        // Iterate over registers and set them to 0
        for (i = 0; i < 8; i++) begin
            Mem[i] <= 0;            
        end
    else if (W_Wr)
        mem[W_Addr] <= W_Data;
    end
end

// Read from memory bank
always_comb begin 
    Rp_Data = Mem [Rp_Addr];
    Rq_Data = Mem [Rq_Addr];
    Rp_Data = Rp_Rd ? Rp_Data : 'z;
    Rq_Data = Rq_Rd ? Rq_Data : 'z;
    
end




endmodule

